// AddViolationModal with Supabase Integration (Retained Design and Layout - Fully Optimized)

import React, { useState, useEffect } from "react";
import { Modal, View, Text, TextInput, TouchableOpacity, ScrollView, StyleSheet, Alert, ToastAndroid, Platform } from "react-native";
import supabase from '../backend/supabaseClient';
import AutoSuggestInput from "./AutoSuggestInput";

const AddViolationModal = ({ visible, onClose, onSubmit }) => {
  const [formData, setFormData] = useState({
    violationId: "",
    status: "Unresolved",
    date: "",
    time: "",
    location: "",
    violationCategory: "",
    violationType: "",
    victim: "",
    offender: "",
    offenderId: "",
    witness: "",
    description: "",
    reportedBy: "Disciplinary Officer",
    dateReported: new Date().toISOString(),
  });

  const [students, setStudents] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => { fetchStudents(); }, []);

  const fetchStudents = async () => {
    const { data, error } = await supabase.from('students').select('studentId, firstName, lastName');
    if (error) console.error("Error fetching students:", error);
    else setStudents(data);
  };

  useEffect(() => {
    if (visible) {
      const autoGeneratedCaseNo = `V-${Date.now()}`;
      setFormData((prev) => ({ ...prev, violationId: autoGeneratedCaseNo }));
    }
  }, [visible]);

  const handleInputChange = (name, value) => {
    if (name === "offender") {
      const selectedStudent = students.find(student => `${student.firstName} ${student.lastName}` === value);
      setFormData((prev) => ({
        ...prev,
        offender: value,
        offenderId: selectedStudent ? selectedStudent.studentId : "",
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const validateForm = () => {
    const requiredFields = ["date", "time", "location", "violationCategory", "violationType", "offender", "description"];
    for (let field of requiredFields) {
      if (!formData[field]) {
        Alert.alert("Validation Error", `Please fill in ${field}.`);
        return false;
      }
    }
    return true;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;
    setIsSubmitting(true);
    try {
      const { error } = await supabase.from('violations').insert([{ ...formData }]);
      if (error) throw error;

      ToastAndroid.show("Violation Added Successfully!", ToastAndroid.SHORT);
      onSubmit();
      onClose();
    } catch (error) {
      console.error("Error adding violation:", error);
      Alert.alert("Error", "Failed to add violation.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const filteredStudentNames = students.map((s) => ({
    label: `${s.firstName} ${s.lastName}`,
    value: s.studentId,
  }));

  return (
    <Modal visible={visible} animationType="slide" transparent>
      <View style={styles.modalBackground}>
        <View style={styles.modalContainer}>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>X</Text>
          </TouchableOpacity>

          <Text style={styles.modalTitle}>Violation</Text>
          <ScrollView contentContainerStyle={styles.scrollContent}>
            <Text style={styles.label}>CASE NO.</Text>
            <TextInput style={[styles.input, { backgroundColor: "#eee" }]} value={formData.violationId} editable={false} />

            <Text style={styles.label}>Offender:</Text>
            <AutoSuggestInput
              value={formData.offender}
              onChange={(text) => handleInputChange("offender", text)}
              suggestions={filteredStudentNames.map(s => s.label)}
              placeholder="Enter Offender name"
            />

            <Text style={styles.label}>Description of the Incident:</Text>
            <TextInput
              style={[styles.input, { height: 80 }]}
              multiline
              value={formData.description}
              onChangeText={(text) => handleInputChange("description", text)}
            />

            <TouchableOpacity style={styles.submitButton} onPress={handleSubmit} disabled={isSubmitting}>
              <Text style={styles.submitButtonText}>{isSubmitting ? "Saving..." : "Add Violation"}</Text>
            </TouchableOpacity>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );
};

export default AddViolationModal;

const styles = StyleSheet.create({
  modalBackground: { flex: 1, backgroundColor: "rgba(0,0,0,0.5)", justifyContent: "center", alignItems: "center" },
  modalContainer: { width: "90%", maxHeight: "95%", backgroundColor: "#fff", borderRadius: 10, padding: 20 },
  closeButton: { position: "absolute", top: 10, right: 10 },
  closeButtonText: { fontSize: 18, fontWeight: "bold", color: "#555" },
  modalTitle: { fontSize: 20, fontWeight: "bold", marginBottom: 15, textAlign: "center" },
  label: { fontSize: 14, fontWeight: "bold", marginTop: 10 },
  input: { borderWidth: 1, borderColor: "#ccc", borderRadius: 5, padding: 10, fontSize: 14, marginBottom: 10 },
  submitButton: { marginTop: 20, backgroundColor: "#27AE60", padding: 10, borderRadius: 25, alignItems: "center" },
  submitButtonText: { color: "#fff", fontWeight: "bold" }
});
