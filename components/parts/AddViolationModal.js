  import React, { useState, useEffect } from "react";
  import {
    Modal,
    View,
    Text,
    TextInput,
    TouchableOpacity,
    ScrollView,
    StyleSheet,
    Alert,
    ToastAndroid,
    Platform,
  } from "react-native";
  import RNPickerSelect from "react-native-picker-select";
  import { collection, addDoc, getDocs, query, where } from "firebase/firestore";
  import { firestore } from "../backend/firebaseConfig";
  import AutoSuggestInput from "./AutoSuggestInput";

  const AddViolationModal = ({ visible, onClose, onSubmit }) => {
    const [formData, setFormData] = useState({
      caseNo: "",
      month: "",
      day: "",
      year: "",
      time: "",
      status: "Unresolved",
      location: "",
      violationCategory: "",
      violationType: "",
      victim: "",
      offender: "",
      offenderId: "", // Store the offender's student ID
      witness: "",
      description: "",
      DateReported: "",
      reportedBy: "Disciplinary Officer",
    });

    const [students, setStudents] = useState([]);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const violationTypes = [
      { type: "Minor Offense", title: "Tardiness" },
      { type: "Minor Offense", title: "Dress Code Violation" },
      { type: "Minor Offense", title: "Unauthorized Use of Phone" },
      { type: "Minor Offense", title: "Eating in Class" },
      { type: "Minor Offense", title: "Minor Disrespect to Peers" },
      { type: "Major Offense", title: "Bullying" },
      { type: "Major Offense", title: "Fighting or Physical Altercation" },
      { type: "Major Offense", title: "Theft" },
      { type: "Major Offense", title: "Vandalism" },
      { type: "Major Offense", title: "Severe Disrespect to Teacher" },
    ];

    useEffect(() => {
      const fetchStudents = async () => {
        try {
          const q = query(collection(firestore, "users"), where("role", "==", "student"));
          const snapshot = await getDocs(q);
          const list = snapshot.docs.map((doc) => ({
            id: doc.id, 
            studentNo: doc.data().studentNo,  // Add studentNo here
            ...doc.data()
          }));
          setStudents(list);
        } catch (error) {
          console.error("Error fetching students:", error);
        }
      };
      fetchStudents();
    }, []);
    

    useEffect(() => {
      if (visible) {
        const today = new Date();
        const formattedDate = today.toLocaleDateString("en-CA");
        const yyyyMMdd = today.toISOString().slice(0, 10).replace(/-/g, "");
        const random3Digits = Math.floor(100 + Math.random() * 900);
        const autoGeneratedCaseNo = `V-${yyyyMMdd}-${random3Digits}`;
        setFormData({
          caseNo: autoGeneratedCaseNo,
          month: "",
          day: "",
          year: "",
          time: "",
          status: "Unresolved",
          location: "",
          violationCategory: "",
          violationType: "",
          victim: "",
          offender: "",
          offenderId: "",
          witness: "",
          description: "",
          DateReported: formattedDate,
          reportedBy: "Disciplinary Officer",
        });
      }
    }, [visible]);

    const handleInputChange = (name, value) => {
      if (name === "offender") {
        const selectedStudent = students.find(student => `${student.firstName} ${student.lastName}` === value);
        setFormData((prev) => ({
          ...prev,
          offender: value,  // Store the offender's name
          offenderId: selectedStudent ? selectedStudent.studentNo : "",  // Store studentNo instead of id
        }));
      } else {
        setFormData((prev) => ({ ...prev, [name]: value }));
      }
    };

    const validateForm = () => {
      const requiredFields = ["month", "day", "year", "time", "location", "violationCategory", "violationType", "offender", "description"];
      for (let field of requiredFields) {
        if (!formData[field]) {
          Alert.alert("Validation Error", `Please fill in ${field.replace(/([A-Z])/g, " $1").toLowerCase()}.`);
          return false;
        }
      }
      return true;
    };

    const showSuccessToast = () => {
      if (Platform.OS === "android") {
        ToastAndroid.show("Violation Added Successfully!", ToastAndroid.SHORT);
      }
    };

    const filteredViolationTypes = violationTypes
      .filter((item) => item.type === formData.violationCategory)
      .map((item) => ({ label: item.title, value: item.title }));

    const filteredStudentNames = students.map((s) => ({
      label: `${s.firstName} ${s.lastName}`,  // Display the student's name
      value: s.studentNo,  // Use studentNo as the value
    }));

    const handleSubmit = async () => {
      if (!validateForm()) return;
      setIsSubmitting(true);
      try {
        await addDoc(collection(firestore, "violations"), {
          ...formData,
          updates: [
            {
              title: "Report Created",
              date: new Date().toISOString(),
            },
          ],
        });
        showSuccessToast();
        onSubmit();
        onClose();
      } catch (error) {
        console.error("Error adding violation:", error);
        Alert.alert("Error", "Failed to add violation.");
      } finally {
        setIsSubmitting(false);
      }
    };

    return (
      <Modal visible={visible} animationType="slide" transparent>
        <View style={styles.modalBackground}>
          <View style={styles.modalContainer}>
            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
              <Text style={styles.closeButtonText}>X</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Violation</Text>
            <ScrollView contentContainerStyle={styles.scrollContent}>
              <Text style={styles.label}>CASE NO.</Text>
              <TextInput style={[styles.input, { backgroundColor: "#eee" }]} value={formData.caseNo} editable={false} />

              <Text style={styles.label}>Status</Text>
              <RNPickerSelect
                onValueChange={(value) => handleInputChange("status", value)}
                value={formData.status}
                style={pickerStyles}
                items={[
                  { label: "Unresolved", value: "Unresolved" },
                  { label: "Resolved", value: "Resolved" },
                  { label: "Pending", value: "Pending" },
                  { label: "Archived", value: "Archived" },
                ]}
              />

              {/* Date and Time Section */}
              <Text style={styles.label}>Date of the Incident:</Text>
              <View style={styles.dateTimeRow}>
                <RNPickerSelect
                  onValueChange={(value) => handleInputChange("month", value)}
                  value={formData.month}
                  style={pickerStyles}
                  placeholder={{ label: "Month", value: "" }}
                  items={[
                    { label: "January", value: "January" },
                    { label: "February", value: "February" },
                    { label: "March", value: "March" },
                    { label: "April", value: "April" },
                    { label: "May", value: "May" },
                    { label: "June", value: "June" },
                    { label: "July", value: "July" },
                    { label: "August", value: "August" },
                    { label: "September", value: "September" },
                    { label: "October", value: "October" },
                    { label: "November", value: "November" },
                    { label: "December", value: "December" },
                  ]}
                />
                <RNPickerSelect
                  onValueChange={(value) => handleInputChange("day", value)}
                  value={formData.day}
                  style={pickerStyles}
                  placeholder={{ label: "Day", value: "" }}
                  items={Array.from({ length: 31 }, (_, i) => ({
                    label: `${i + 1}`,
                    value: `${i + 1}`,
                  }))}
                />
                <RNPickerSelect
                  onValueChange={(value) => handleInputChange("year", value)}
                  value={formData.year}
                  style={pickerStyles}
                  placeholder={{ label: "Year", value: "" }}
                  items={Array.from({ length: 100 }, (_, i) => ({
                    label: `${new Date().getFullYear() - i}`,
                    value: `${new Date().getFullYear() - i}`,
                  }))}
                />
              </View>

              <Text style={styles.label}>Time of the Incident:</Text>
              <RNPickerSelect
                onValueChange={(value) => handleInputChange("time", value)}
                value={formData.time}
                style={pickerStyles}
                placeholder={{ label: "Time", value: "" }}
                items={[
                  { label: "12:00 AM", value: "12:00 AM" },
                  { label: "1:00 AM", value: "1:00 AM" },
                  { label: "2:00 AM", value: "2:00 AM" },
                  { label: "3:00 AM", value: "3:00 AM" },
                  // Add more time options as necessary
                ]}
              />

              {/* Location, Violation Type, Offender, Victim, and Description Inputs */}
              <Text style={styles.label}>Location:</Text>
              <TextInput style={styles.input} value={formData.location} onChangeText={(text) => handleInputChange("location", text)} />

              <Text style={styles.label}>Violation Category:</Text>
              <RNPickerSelect
                onValueChange={(value) => handleInputChange("violationCategory", value)}
                value={formData.violationCategory}
                style={pickerStyles}
                placeholder={{ label: "Select Category", value: "" }}
                items={[
                  { label: "Minor", value: "Minor Offense" },
                  { label: "Major", value: "Major Offense" },
                ]}
              />

              <Text style={styles.label}>Violation Type:</Text>
              <RNPickerSelect
                onValueChange={(value) => handleInputChange("violationType", value)}
                value={formData.violationType}
                style={pickerStyles}
                placeholder={{ label: formData.violationCategory ? "Select Violation Type" : "Select Category first", value: "" }}
                disabled={!formData.violationCategory}
                items={filteredViolationTypes}
              />

              {/* AutoSuggest for Victim, Offender, and Witness */}
              {["victim", "witness"].map((field, index) => (
                <AutoSuggestInput
                  key={index}
                  label={field.charAt(0).toUpperCase() + field.slice(1)}
                  value={formData[field]}
                  onChange={(text) => handleInputChange(field, text)}
                  suggestions={filteredStudentNames.map(s => s.label)} // Provide only names for display
                  placeholder={`Enter ${field} name`}
                />
              ))}

              <Text style={styles.label}>Offender:</Text>
              <AutoSuggestInput
                value={formData.offender}
                onChange={(text) => handleInputChange("offender", text)} // Store the selected offender name
                suggestions={filteredStudentNames.map(s => s.label)} // Provide only names for display
                placeholder="Enter Offender name"
              />

              <Text style={styles.label}>Offender's Student ID:</Text>
              <TextInput
                style={[styles.input, { backgroundColor: "#eee" }]}
                value={formData.offenderId} // Display offender's studentNo (ID)
                editable={false} // Make it non-editable
              />


              <Text style={styles.label}>Description of the Incident:</Text>
              <TextInput
                style={[styles.input, { height: 80 }]}
                multiline
                value={formData.description}
                onChangeText={(text) => handleInputChange("description", text)}
              />

              <TouchableOpacity style={styles.submitButton} onPress={handleSubmit} disabled={isSubmitting}>
                <Text style={styles.submitButtonText}>{isSubmitting ? "Saving..." : "Add Violation"}</Text>
              </TouchableOpacity>
            </ScrollView>
          </View>
        </View>
      </Modal>
    );
  };

  export default AddViolationModal;

  const styles = StyleSheet.create({
    modalBackground: { flex: 1, backgroundColor: "rgba(0,0,0,0.5)", justifyContent: "center", alignItems: "center" },
    modalContainer: { width: "90%", maxHeight: "95%", backgroundColor: "#fff", borderRadius: 10, padding: 20 },
    closeButton: { position: "absolute", top: 10, right: 10 },
    closeButtonText: { fontSize: 18, fontWeight: "bold", color: "#555" },
    modalTitle: { fontSize: 20, fontWeight: "bold", marginBottom: 15, textAlign: "center" },
    scrollContent: { paddingBottom: 20 },
    label: { fontSize: 14, fontWeight: "bold", marginTop: 10 },
    input: { borderWidth: 1, borderColor: "#ccc", borderRadius: 5, padding: 10, fontSize: 14, marginBottom: 10 },
    inputText: { fontSize: 14, color: "#605E5E" },
    submitButton: { marginTop: 20, backgroundColor: "#27AE60", padding: 10, borderRadius: 25, alignItems: "center" },
    submitButtonText: { color: "#fff", fontWeight: "bold" },
  });

  const pickerStyles = {
    inputIOS: { fontSize: 14, padding: 10, borderWidth: 1, borderColor: "#ccc", borderRadius: 5, backgroundColor: "#fff", color: "#000" },
    inputAndroid: { fontSize: 14, padding: 10, borderWidth: 1, borderColor: "#ccc", borderRadius: 5, backgroundColor: "#fff", color: "#000" },
  };
